# Look for notes starting with TC: if things go pear-shaped
# Settings in the [build] context are global and are applied to all contexts
# unless otherwise overridden by more specific contexts.
# TC: I used this to create the executable
# $ env GOOS=linux GOARCH=amd64 go build 
[build]
  # Directory to change to before starting a build.
  # This is where we will look for package.json/.nvmrc/etc.
  base = ""

  # Directory (relative to root of your repo) that contains the deploy-ready
  # HTML files and assets generated by the build. If a base directory has
  # been specified, include it in the publish directory path.
  publish = ".pub"

  # Default build command.
  command = "./mb build"

# Production context: all deploys from the Production branch set in your site's
# deploy contexts will inherit these settings.
# TC: I have no idea how this differs from the above.
[context.production]
  publish = ".pub"
  command = "./mb build"
# TC: OK to comment this out?
  # environment = { ACCESS_TOKEN = "super secret", NODE_VERSION = "8.0.1" }

# Deploy Preview context: all deploys generated from a pull/merge request will
# inherit these settings.
[context.deploy-preview]
  publish = ".pub"

[context.staging] # 'staging' is a branch name
  command = "./mb build"
  # TC: Left this as is
  base = "staging"

# For contexts of branches with special characters, enclose the branch name
# with quotes.
[context."feat/branch"]
  command = "./mb build"
  base = "branch"

# Redirects and headers are GLOBAL for all builds â€“ they do not get scoped to
# contexts no matter where you define them in the file.
# For context-specific rules, use _headers or _redirects files, which are
# PER-DEPLOY.

# A redirect rule with all the supported properties
# TC: Left untouched
[[redirects]]
  # The default HTTP status code is 301, but you can define a different one.
  status = 302

  # By default, redirects won't be applied if there's a file with the same
  # path as the one defined in the `from` property. Setting `force` to `true`
  # will make the redirect rule take precedence over any existing files.
  force = true

  # Redirect from /old-path?id=123 to /new-path. Each combination of query
  # params needs to be defined in a separate [[redirects]] block.
  # More information at https://docs.netlify.com/routing/redirects/redirect-options/#query-parameters
  query = {id = ":id"}

  # Redirect based on browser language, geolocation, and/or identity role.
  conditions = {Language = ["en"], Country = ["US"]}

  # Sign each request with a value defined in an environment variable
  # TC: What's this for?
  signed = "API_SIGNATURE_TOKEN"

  # You can also define custom headers within your redirects blocks.
  [redirects.headers]
    X-From = "Netlify"
    X-Api-Key = "some-api-key-string"

# The following redirect is intended for use with most SPAs that handle
# routing internally.
[[redirects]]
  from = "/*"
  # TC: Added .pub/
  to = ".pub/index.html"
  status = 200

[[headers]]
  # Define which paths this specific [[headers]] block will cover.
  for = "/*"

  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    Content-Security-Policy = "frame-ancestors https://www.facebook.com"

    # Multi-value headers are expressed with multi-line strings.
	cache-control = '''
	max-age=0,
	no-cache,
	no-store,
	must-revalidate'''

    # Basic-Auth allows you to password protect your whole site.
    # This feature may not be available on all plans.
    # TC: Left untouched
    Basic-Auth = "someuser:somepassword anotheruser:anotherpassword"
